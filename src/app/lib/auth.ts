import type { NextAuthOptions, User } from "next-auth"; // üëà ‡πÉ‡∏ä‡πâ User ‡∏à‡∏≤‡∏Å next-auth ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
import CredentialsProvider from "next-auth/providers/credentials";
import serverApiClient from "../core/services/server-api-client";

// ‚ùå ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏® MyUser ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏£‡∏≤‡∏Ç‡∏¢‡∏≤‡∏¢ Type ‡∏Ç‡∏≠‡∏á NextAuth ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á

export const authOptions: NextAuthOptions = {
  providers: [
    CredentialsProvider({
      name: "Credentials",
      credentials: {
        username: { label: "Username", type: "text" },
        password: { label: "Password", type: "password" },
      },
      // üëá return type ‡πÄ‡∏õ‡πá‡∏ô User ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏Ç‡∏¢‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß
      async authorize(credentials): Promise<User | null> {
        if (!credentials?.username || !credentials?.password) {
          throw new Error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô");
        }

        try {
          // 1. ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API /auth ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏≠‡∏≤ Tokens
          const authResponse = await serverApiClient.post("/auth/login", {
            username: credentials.username,
            password: credentials.password,
          });

          const tokens = authResponse.data;

          if (tokens && tokens.accessToken) {
            // 2. ‡∏ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ token ‡∏°‡∏≤ ‡πÉ‡∏´‡πâ return object ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÅ‡∏Ñ‡πà token
            //    ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á‡πÉ‡∏ô jwt callback
            return {
              // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API /auth
              accessToken: tokens.accessToken,
              refreshToken: tokens.refreshToken,
              expiresIn: tokens.expiresIn,
              kind: tokens.kind,

              // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏ï‡∏≤‡∏° DefaultUser (‡πÉ‡∏™‡πà‡∏Ñ‡πà‡∏≤‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß)
              id: "placeholder-id",
              name: "",
              email: "",
              image: "",
            };
          }
          return null;
        } catch (error: any) {
          const errorMessage =
            error.response?.data?.message || "‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á";
          throw new Error(errorMessage);
        }
      },
    }),
  ],
  session: {
    strategy: "jwt",
  },
  callbacks: {
    async jwt({ token, user, account }) {
      console.log("--- JWT CALLBACK START ---");
      console.log("Input token:", token);
      console.log("Input user:", user);
      console.log("Input account:", account);
      // `user` object ‡∏à‡∏∞‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÅ‡∏Ñ‡πà‡∏ï‡∏≠‡∏ô‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
      if (user && account?.provider === "credentials") {
        console.log("JWT: Initial sign in, attaching tokens from user object...");
        // 1. ‡∏ô‡∏≥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• token ‡∏à‡∏≤‡∏Å `user` (‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å authorize) ‡∏°‡∏≤‡πÉ‡∏™‡πà‡πÉ‡∏ô `token`
        token.accessToken = user.accessToken;
        token.refreshToken = user.refreshToken;

        // ‚ú® 2. ‡πÉ‡∏ä‡πâ accessToken ‡πÑ‡∏õ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‚ú®
        try {
          console.log("JWT: Attempting to fetch profile with new access token...");
          const profileResponse = await serverApiClient.get('/user/profile',
            {   // options ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô parameter ‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö .post()
              headers: {
                Authorization: `Bearer ${token.accessToken}`,
              },
            });

          const userProfile = profileResponse.data;
          console.log("JWT: Profile fetched successfully:", userProfile);

          // 3. ‡∏ú‡∏ô‡∏ß‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• profile ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô token (‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏° API ‡∏ó‡∏µ‡πà‡∏°‡∏µ)

          // ‡∏ñ‡πâ‡∏≤ API ‡πÑ‡∏°‡πà‡∏°‡∏µ id, ‡πÄ‡∏£‡∏≤‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∑‡πà‡∏ô‡πÅ‡∏ó‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏≠ API ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
          // ‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ userName ‡πÄ‡∏õ‡πá‡∏ô id ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
          token.id = userProfile.userName || token.id; // ‡πÉ‡∏ä‡πâ userName ‡∏´‡∏£‡∏∑‡∏≠ id ‡πÄ‡∏î‡∏¥‡∏° (placeholder)

          token.name = userProfile.displayName;

          // ‡∏ñ‡πâ‡∏≤ API ‡πÑ‡∏°‡πà‡∏°‡∏µ email, ‡πÄ‡∏£‡∏≤‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÉ‡∏ä‡πâ userName ‡πÄ‡∏õ‡πá‡∏ô email ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
          token.email = userProfile.userName || null; // ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏™‡πà null ‡πÑ‡∏õ‡πÄ‡∏•‡∏¢‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
          // token.roles = userProfile.roles; // ‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        } catch (error) {
          console.error("!!!!!!!! JWT: FAILED TO FETCH PROFILE !!!!!!!", error);
          // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ token ‡∏ó‡∏µ‡πà‡∏°‡∏µ accessToken ‡πÑ‡∏õ‡∏Å‡πà‡∏≠‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ session ‡∏¢‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ
          // ‡πÅ‡∏ï‡πà‡πÄ‡∏û‡∏¥‡πà‡∏° error flag ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ
          const errorToken = { ...token, error: "FetchProfileError" };
          console.log("JWT: Returning token with error:", errorToken);
          return errorToken;
        }
      }

      // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ï‡πà‡∏≠‡πÜ ‡πÑ‡∏õ ‡∏à‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ token ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡πÅ‡∏•‡πâ‡∏ß
      console.log("--- JWT CALLBACK END --- Returning token:", token);
      return token;
    },

    async session({ session, token }) {
      console.log("--- SESSION CALLBACK START ---");
      console.log("Input session:", session);
      console.log("Input token (from JWT):", token);
      // `token` ‡∏Ñ‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å `jwt` callback
      // ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å token ‡πÑ‡∏õ‡∏¢‡∏±‡∏á session
      if (token) {
        session.user.id = token.id;
        session.user.name = token.name;
        session.user.email = token.email;
        // session.user.roles = token.roles;

        session.accessToken = token.accessToken;
        session.refreshToken = token.refreshToken;
        // ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏° error handling ‡πÑ‡∏î‡πâ
        // session.error = token.error
      }
      console.log("--- SESSION CALLBACK END --- Returning session:", session);
      return session;
    },
  },
  events: {
    async signOut({ token, session }) {
      // `token` ‡∏Ñ‡∏∑‡∏≠ JWT ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á accessToken ‡πÅ‡∏•‡∏∞ refreshToken
      console.log("SignOut event triggered. Invalidating token on backend...");

      try {
        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API /auth/logout ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏à‡∏≤‡∏Å‡∏ù‡∏±‡πà‡∏á Server
        // ‡∏™‡πà‡∏á refreshToken ‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢‡∏ñ‡πâ‡∏≤ Backend ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        await serverApiClient.post('/auth/logout', {
          refreshToken: token.refreshToken,
        }, {
          headers: {
            // ‡∏™‡πà‡∏á accessToken ‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
            Authorization: `Bearer ${token.accessToken}`,
          }
        });

        console.log("‚úÖ Token successfully invalidated on backend.");
      } catch (error) {
        console.error("üí• Failed to invalidate token on backend.", error);
        // ‡πÄ‡∏£‡∏≤‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÅ‡∏Ñ‡πà log error ‡πÑ‡∏ß‡πâ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏á‡∏ù‡∏±‡πà‡∏á client ‡∏Å‡πá‡∏à‡∏∞ logout ‡∏≠‡∏¢‡∏π‡πà‡∏î‡∏µ
      }
    }
  },

  pages: {
    signIn: "/login", // ‡∏´‡∏ô‡πâ‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
  },
  secret: process.env.NEXTAUTH_SECRET,
};
